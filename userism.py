import base64

# Shifrlangan skript (Base64 formatida)
encoded_script = """CmZyb20gdGVsZXRob24uc3luYyBpbXBvcnQgVGVsZWdyYW1DbGllbnQKaW1wb3J0IGNzdiAKaW1wb3J0IHRpbWUKZnJvbSB0ZWxldGhvbiBpbXBvcnQgdXRpbHMKZnJvbSB0ZWxldGhvbi50bC5mdW5jdGlvbnMuYWNjb3VudCBpbXBvcnQgVXBkYXRlU3RhdHVzUmVxdWVzdCwgVXBkYXRlVXNlcm5hbWVSZXF1ZXN0LCBVcGRhdGVQcm9maWxlUmVxdWVzdCwgQ2hlY2tVc2VybmFtZVJlcXVlc3QKCiMgRm95ZGFsYW51dmNoaWRhbiB1c2VybmFtZSBraXJpdGlzaGluaSBzbydyYXNoCmRlZiBhc2tfZm9yX3VzZXJuYW1lKCk6CiAgICB3aGlsZSBUcnVlOgogICAgICAgIHVzZXJuYW1lID0gaW5wdXQoIlVzZXJuYW1lIGtpcml0aW5nIChvJ3RrYXppYiB5dWJvcmlzaCB1Y2h1biAnYScpOiAiKQogICAgICAgIGlmIHVzZXJuYW1lLmxvd2VyKCkgPT0gJ2EnOgogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIGlmIGlzX3ZhbGlkX3VzZXJuYW1lKHVzZXJuYW1lKToKICAgICAgICAgICAgcmV0dXJuIHVzZXJuYW1lCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoIlVzZXJuYW1lIG5vdG8nZydyaS4gQm9zaHFhIHVzZXJuYW1lIGtpcml0aW5nLiIpCgojIFVzZXJuYW1lIHVjaHVuIHRla3NoaXJpc2ggZnVua3NpeWFzaQpkZWYgaXNfdmFsaWRfdXNlcm5hbWUodXNlcm5hbWUpOgogICAgaWYgbGVuKHVzZXJuYW1lKSA8IDMgb3IgbGVuKHVzZXJuYW1lKSA+IDIwOgogICAgICAgIHJldHVybiBGYWxzZQogICAgaWYgbm90IGFsbChjLmlzYWxudW0oKSBvciBjID09ICdfJyBmb3IgYyBpbiB1c2VybmFtZSk6CiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBpZiB1c2VybmFtZVswXSA9PSAnXycgb3IgdXNlcm5hbWVbLTFdID09ICdfJzoKICAgICAgICByZXR1cm4gRmFsc2UKICAgIGlmICdfXycgaW4gdXNlcm5hbWU6CiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICByZXR1cm4gVHJ1ZQoKIyBUZWxlZm9uIHJhcWFtbGFyaSBDU1YgZmF5bGRhbiBvbGlzaApwaG9uZWNzdiA9ICJwaG9uZSIKd2l0aCBvcGVuKGYne3Bob25lY3N2fS5jc3YnLCAncicpIGFzIGY6CiAgICBwaGxpc3QgPSBbcm93WzBdIGZvciByb3cgaW4gY3N2LnJlYWRlcihmKV0KcHJpbnQoJ/Cfk51KQU1JIFJBUUFNTEFSOiDwn5SiICcrc3RyKGxlbihwaGxpc3QpKSkKCnByY2hrID0gJ1knCgpxb3dpd2ptID0gMApxb3dpd2ptMiA9IGludChzdHIobGVuKHBobGlzdCkpKQoKaW5kZXh4ID0gMApmb3IgZGVsdGF4ZCBpbiBwaGxpc3RbcW93aXdqbTpxb3dpd2ptMl06CiAgICB0cnk6CiAgICAgICAgaW5kZXh4ICs9IDEKICAgICAgICBwaG9uZSA9IHV0aWxzLnBhcnNlX3Bob25lKGRlbHRheGQpCiAgICAgICAgCiAgICAgICAgYXBpX2lkID0gNjgxMDQzOQogICAgICAgIGFwaV9oYXNoID0gJzY2YWMzYjY3Y2NlMTc3MWNlMTI5ODE5YTQyZWZlMDJlJwogICAgICAgIGNsaWVudCA9IFRlbGVncmFtQ2xpZW50KGYic2Vzc2lvbnMve3Bob25lfSIsIGFwaV9pZCwgYXBpX2hhc2gpCiAgICAgICAgY2xpZW50LnN0YXJ0KHBob25lKQogICAgICAgIGNsaWVudChVcGRhdGVTdGF0dXNSZXF1ZXN0KG9mZmxpbmU9RmFsc2UpKQogICAgICAgIAogICAgICAgIHVzZXIgPSBjbGllbnQuZ2V0X21lKCkKICAgICAgICBwcmludChmIlt7aW5kZXh4fV0g8J+TniB7cGhvbmV9IPCfkaQge3VzZXIuZmlyc3RfbmFtZX0g8J+UlCBAe3VzZXIudXNlcm5hbWV9IikKCiAgICAgICAgZGVmIGFza19mb3JfZmlyc3RfbmFtZSgpOgogICAgICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICAgICAgZmlyc3RfbmFtZSA9IGlucHV0KCJJc20ga2lyaXRpbmcgKG8ndGthemliIHl1Ym9yaXNoIHVjaHVuICdhJyk6ICIpCiAgICAgICAgICAgICAgICBpZiBmaXJzdF9uYW1lLmxvd2VyKCkgPT0gJ2EnOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgICAgICAgICBpZiBsZW4oZmlyc3RfbmFtZSkgPiAwIGFuZCBsZW4oZmlyc3RfbmFtZSkgPD0gNTA6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0X25hbWUKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIklzbSBub3RvJ2cncmkuIEJvc2hxYSBpc20ga2lyaXRpbmcuIikKCiAgICAgICAgIyBVc2VybmFtZSB1Y2h1biB0ZWtzaGlyaXNoIGZ1bmtzaXlhc2kKICAgICAgICBkZWYgaXNfdmFsaWRfdXNlcm5hbWUodXNlcm5hbWUpOgogICAgICAgICAgICBpZiBsZW4odXNlcm5hbWUpIDwgMyBvciBsZW4odXNlcm5hbWUpID4gMjA6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgaWYgbm90IGFsbChjLmlzYWxudW0oKSBvciBjID09ICdfJyBmb3IgYyBpbiB1c2VybmFtZSk6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgaWYgdXNlcm5hbWVbMF0gPT0gJ18nIG9yIHVzZXJuYW1lWy0xXSA9PSAnXyc6CiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgaWYgJ19fJyBpbiB1c2VybmFtZToKICAgICAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICAgICAjIEZveWRhbGFudXZjaGlkYW4gdXNlcm5hbWUga2lyaXRpc2huaSBzbydyYXNoCiAgICAgICAgZGVmIGFza19mb3JfdXNlcm5hbWUoKToKICAgICAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gaW5wdXQoIlVzZXJuYW1lIGtpcml0aW5nIChvJ3RrYXppYiB5dWJvcmlzaCB1Y2h1biAnYScpOiAiKQogICAgICAgICAgICAgICAgaWYgdXNlcm5hbWUubG93ZXIoKSA9PSAnYSc6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgICAgIGlmIGlzX3ZhbGlkX3VzZXJuYW1lKHVzZXJuYW1lKToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlcm5hbWUKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlVzZXJuYW1lIG5vdG8nZydyaS4gQm9zaHFhIHVzZXJuYW1lIGtpcml0aW5nLiIpCgogICAgICAgIGRlZiB1cGRhdGVfdXNlcm5hbWUoY2xpZW50LCBuZXdfdXNlcm5hbWUpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAjIENoZWNrIGlmIHVzZXJuYW1lIGlzIGF2YWlsYWJsZSBiZWZvcmUgdHJ5aW5nIHRvIHNldCBpdAogICAgICAgICAgICAgICAgcmVzdWx0ID0gY2xpZW50KENoZWNrVXNlcm5hbWVSZXF1ZXN0KG5ld191c2VybmFtZSkpCiAgICAgICAgICAgICAgICBpZiByZXN1bHQ6CiAgICAgICAgICAgICAgICAgICAgY2xpZW50KFVwZGF0ZVVzZXJuYW1lUmVxdWVzdChuZXdfdXNlcm5hbWUpKQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiWWFuZ2kgdXNlcm5hbWUgbydybmF0aWxkaTog8J+UlCB7bmV3X3VzZXJuYW1lfSIpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHByaW50KCJCdSB1c2VybmFtZSBhbGxhcWFjaG9uIGlzaGxhdGlsbW9xZGEuIFlhbmdpIHVzZXJuYW1lIGtpcml0aW5nLiIpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KGYiWGF0b2xpayB5dXogYmVyZGk6IHtlfSIpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgcmV0dXJuIFRydWUKCiAgICAgICAgIyBJc20geWFuZ2lsYXNoCiAgICAgICAgbmV3X2ZpcnN0X25hbWUgPSBhc2tfZm9yX2ZpcnN0X25hbWUoKQogICAgICAgIGlmIG5ld19maXJzdF9uYW1lOgogICAgICAgICAgICBjbGllbnQoVXBkYXRlUHJvZmlsZVJlcXVlc3QoZmlyc3RfbmFtZT1uZXdfZmlyc3RfbmFtZSkpCiAgICAgICAgICAgIHByaW50KGYiWWFuZ2kgaXNtIG8ncm5hdGlsZGk6IPCfkaQge25ld19maXJzdF9uYW1lfSIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoIklzbSBvJ3pnYXJ0aXJpbG1hZGkuIikKCiAgICAgICAgIyBVc2VybmFtZSB5YW5naWxhc2gKICAgICAgICBuZXdfdXNlcm5hbWUgPSBhc2tfZm9yX3VzZXJuYW1lKCkKICAgICAgICBpZiBuZXdfdXNlcm5hbWU6CiAgICAgICAgICAgIHVzZXJuYW1lX3VwZGF0ZWQgPSBGYWxzZQogICAgICAgICAgICB3aGlsZSBub3QgdXNlcm5hbWVfdXBkYXRlZDoKICAgICAgICAgICAgICAgIHVzZXJuYW1lX3VwZGF0ZWQgPSB1cGRhdGVfdXNlcm5hbWUoY2xpZW50LCBuZXdfdXNlcm5hbWUpCiAgICAgICAgICAgICAgICBpZiBub3QgdXNlcm5hbWVfdXBkYXRlZDoKICAgICAgICAgICAgICAgICAgICBuZXdfdXNlcm5hbWUgPSBhc2tfZm9yX3VzZXJuYW1lKCkgICMgQXNrIGFnYWluIGlmIHRoZSB1c2VybmFtZSB3YXMgYWxyZWFkeSB0YWtlbgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCJVc2VybmFtZSBvJ3pnYXJ0aXJpbG1hZGkuIikKCiAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgIG1lID0gY2xpZW50LmdldF9tZSgpCiAgICAgICAgcHJpbnQoZiJZQU5HSSBJU00gVkEgVVNFUk5BTUU6IPCfkaQge21lLmZpcnN0X25hbWV9IPCflJQgQHttZS51c2VybmFtZX0iKSAKCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoImVycm9yOiIsIGUpCiAgICAgICAgY29udGludWUK"""

# Skriptni dekod qilish va ishga tushirish
exec(base64.b64decode(encoded_script).decode('utf-8'))
